#!/usr/bin/env python3
import rospy
import sensor_msgs.point_cloud2 as pc2
from geometry_msgs.msg import PoseStamped
from geometry_msgs.msg import Twist
from sensor_msgs.msg import LaserScan
from sensor_msgs.msg import Range
from laser_geometry import LaserProjection


def callbackPose(poseStamped):
	global estado
	global posX
	global oriZ
	global espacoVazio
	global obstEs
	global obstTr
	global obstFr

	position = poseStamped.pose.position
	orientation = poseStamped.pose.orientation
	
	posX = position.x
	oriZ = orientation.z

	# Obtem as distancias minimas dos 3 sensores da frente, traz e esquerda
	obstFrMin = min(obstFr)
	obstTrMin = min(obstTr)
	obstEsqMin = min(obstEs)
	
	rospy.loginfo("est: %.d vaz: %.1f fr: %.1f tr: %.1f oriZ: %.1f" %(estado, espacoVazio, obstFrMin, obstTrMin, oriZ))

	if estado == 0:
		estado = 1
		motion.linear.x = 1
		motion.angular.z = 0
	if estado == 1:
		if espacoVazio > 2.2:
			estado = 2
			motion.linear.x = -0.3
			motion.angular.z = -0.2
	if estado == 2:
		if obstTrMin < 0.8:
			estado = 3
			motion.linear.x = -0.3
			motion.angular.z = 0.3
	if estado == 3:
		if obstTrMin < 0.5:
			estado = 4
			motion.linear.x = 0.15
			motion.angular.z = 0.3
	if estado == 4:
		if obstFrMin < 0.5 or obstEsqMin < 0.2:
			estado = 5
			motion.linear.x = 0.15
			motion.angular.z = -0.3
	if estado == 5:
		if obstFrMin < 0.5 and oriZ >= -0.02 and oriZ <= 0.02:
			estado = 6
			motion.linear.x = 0
			motion.angular.z = 0

	cmd.publish(motion)


def calculaEspacoParkAssist():
	global iniX
	global distX
	global espacoVazio
	global estadoCont
	global obstEs

	# Utiliza o sensor obstEs[1] para o park assist
	# Se o laser não detectar obstáculo, inicia a contagem do espaço vazio
	if estadoCont == 0 and obstEs[0] > 1.3:
		estadoCont = 1	
		iniX = posX
	# Se o laser detectar obstáculo, finaliza a contagem do espaço vazio
	elif estadoCont == 1 and obstEs[0] < 0.7:
		estadoCont = 0
		espacoVazio = distX
	# Se o estadoCont == 1, há um espaço vazio sendo mensurado
	elif estadoCont == 1:
		distX = posX - iniX
	
	#rospy.loginfo("obst: %.1f dist: %.1f esp: %.1f" %(obstEsq, distX, espacoVazio))


def callbackIR(infrared, tipo):
	global obstEs
	global obstTr
	global obstFr
	global numIR
	calculou = 0
	maxX = 0
	point_cloud = laser_projector.projectLaser(infrared)

	# calcula os pontos mínimo e máximo de detecção do infravermelho
	for p in pc2.read_points(point_cloud, field_names = ("x", "y", "z"), skip_nans=True):
		calculou = 1
		if maxX < p[0]:
			maxX = p[0]

		#numIR = numIR + 1
		#rospy.loginfo("%d - %s: %.2f" %(numIR, tipo, maxX))

	if calculou == 1:
		if tipo == 'es1':
			obstEs[0] = maxX
			calculaEspacoParkAssist()
		elif tipo == 'es2':
			obstEs[1] = maxX
		elif tipo == 'es3':
			obstEs[2] = maxX
		elif tipo == 'fr1':
			obstFr[0] = maxX
		elif tipo == 'fr2':
			obstFr[1] = maxX
		elif tipo == 'fr3':
			obstFr[2] = maxX
		elif tipo == 'tr1':
			obstTr[0] = maxX
		elif tipo == 'tr2':
			obstTr[1] = maxX
		elif tipo == 'tr3':
			obstTr[2] = maxX



def callbackIREs1(infrared):
	callbackIR(infrared, 'es1')

def callbackIREs2(infrared):
	callbackIR(infrared, 'es2')

def callbackIREs3(infrared):
	callbackIR(infrared, 'es3')

def callbackIRFr1(infrared):
	callbackIR(infrared, 'fr1')

def callbackIRFr2(infrared):
	callbackIR(infrared, 'fr2')

def callbackIRFr3(infrared):
	callbackIR(infrared, 'fr3')

def callbackIRTr1(infrared):
	callbackIR(infrared, 'tr1')

def callbackIRTr2(infrared):
	callbackIR(infrared, 'tr2')

def callbackIRTr3(infrared):
	callbackIR(infrared, 'tr3')


cmd = rospy.Publisher("/atrv/motion", Twist, queue_size=10)
pos = rospy.Subscriber("/atrv/pose", PoseStamped, callbackPose)
ie1 = rospy.Subscriber("/atrv/infraredEs1", LaserScan, callbackIREs1)
ie2 = rospy.Subscriber("/atrv/infraredEs2", LaserScan, callbackIREs2)
ie3 = rospy.Subscriber("/atrv/infraredEs3", LaserScan, callbackIREs3)
if1 = rospy.Subscriber("/atrv/infraredFr1", LaserScan, callbackIRFr1)
if2 = rospy.Subscriber("/atrv/infraredFr2", LaserScan, callbackIRFr2)
if3 = rospy.Subscriber("/atrv/infraredFr3", LaserScan, callbackIRFr3)
it1 = rospy.Subscriber("/atrv/infraredTr1", LaserScan, callbackIRTr1)
it2 = rospy.Subscriber("/atrv/infraredTr2", LaserScan, callbackIRTr2)
it3 = rospy.Subscriber("/atrv/infraredTr3", LaserScan, callbackIRTr3)
#si1 = rospy.Subscriber("/atrv/sickEsq", LaserScan, callbackScanEsquerda)
#si2 = rospy.Subscriber("/atrv/sickFrente", LaserScan, callbackScanFrente)
#si3 = rospy.Subscriber("/atrv/infraredTraz1", LaserScan, callbackScanTraz1)
#si4 = rospy.Subscriber("/atrv/sickTraz2", LaserScan, callbackScanTraz2)


estado = 0
estadoCont = 0
numIR = 0
posX = 0
iniX = 0
distX = 0
oriZ = 0
obstEs = [9, 9, 9]
obstFr = [9, 9, 9]
obstTr = [9, 9, 9]
espacoVazio = 0

laser_projector = LaserProjection()
motion = Twist()

rospy.init_node("cliente")
rospy.spin() # this will block untill you hit Ctrl+C

